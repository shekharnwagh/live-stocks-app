{"version":3,"sources":["logo.svg","hocs/WebSocketConnection.js","actions/webSocketActions.js","reducers/webSocketReducer.js","helpers/parseStocks.js","reducers/stocksReducer.js","reducers/rootReducer.js","reducers/simpleReducer.js","middleware/middleware.js","actions/stockUpdate.js","App.js","serviceWorker.js","index.js","store.js"],"names":["module","exports","WebSocketConnection","this","props","dispatch","host","type","wsConnect","children","Component","connect","websocketInitialState","addTrends","previous","newUpdate","stocksObj","stock","newStock","change","value","trend","chnage","parseFloat","toFixed","combineReducers","simpleReducer","state","action","result","payload","webSocketReducer","connected","stocks","current","socketMiddleware","socket","onMessage","store","event","stocksArray","name","toUpperCase","time","moment","parseStockData","JSON","parse","data","console","log","next","close","WebSocket","onmessage","onclose","onClose","onopen","target","url","onOpen","App","className","src","logo","alt","href","rel","Boolean","window","location","hostname","match","ReactDOM","render","initialState","createStore","rootReducer","composeWithDevTools","applyMiddleware","thunk","wsMiddleware","configureStore","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fd2483f7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { wsConnect } from '../actions/webSocketActions';\n\nclass WebSocketConnection extends Component {\n    componentDidMount() {\n        const { dispatch, host } = this.props;\n        dispatch(wsConnect(host))\n    }\n\n    render() {\n        return <div>{this.props.children}</div>;\n    }\n}\n\nexport default connect()(WebSocketConnection);\n","export const wsConnect = host => ({\n    type: 'WS_CONNECT',\n    host\n});\n\nexport const wsConnecting = host => ({\n    type: 'WS_CONNECTING',\n    host\n});\n\nexport const wsConnected = host => ({\n    type: 'WS_CONNECTED',\n    host\n});\n\nexport const wsDisconnect = host => ({\n    type: 'WS_DISCONNECT',\n    host\n});\n\nexport const wsDisconnected = host => ({\n    type: 'WS_DISCONNECTED',\n    host\n});\n","const websocketInitialState = {};\n\nexport default (state = { ...websocketInitialState }, action) => {\n    switch (action.type) {\n        case 'WS_CONNECT':\n            return { ...state, host: action.host, connected: true };\n        default:\n            return state;\n    }\n};","import * as moment from 'moment';\n\nexport const parseStockData =  (stocksArray) => {\n    let stocksObj = {};\n    for (const stock of stocksArray) {\n        stocksObj = {\n            ...stocksObj,\n            [stock[0]]: {\n                name: stock[0].toUpperCase(),\n                value: parseFloat(stock[1].toFixed(2)),\n                time: moment()\n            }\n        }\n    }\n    return stocksObj;\n}\n\nexport const addTrends = (previous, newUpdate) => {\n    let stocksObj = {};\n    for (const stock in newUpdate) {\n        const newStock = newUpdate[stock];\n        const change = previous[stock] ? newStock.value - previous[stock].value : 0;\n        const trend = change===0 ? \"STABLE\" : change > 0 ? \"UP\" : \"DOWN\";\n        stocksObj = {\n            ...stocksObj,\n            [stock]: {\n                ...newUpdate[stock],\n                chnage: parseFloat(change.toFixed(2)),\n                trend\n            }\n        }\n    }\n    return stocksObj;\n}","import { addTrends } from '../helpers/parseStocks'\n\nexport default (state = {}, action) => {\n    const previous = state && state.previous ? state.previous : {};\n    const current = state && state.current ? state.current : {};\n    const newUpdate = addTrends(current, action.payload);\n    \n    switch (action.type) {\n        case 'STOCKS_UPDATE':\n            return {\n                    previous: {\n                        ...previous,\n                        ...current\n                    },\n                    current: {\n                        ...current,\n                        ...newUpdate\n                    }\n                }\n        default:\n            return state.stocks ? state.stocks : {}\n    }\n}","import { combineReducers } from 'redux';\nimport simpleReducer from './simpleReducer';\nimport webSocketReducer from './webSocketReducer';\nimport stocksReducer from './stocksReducer';\n\nexport default combineReducers({\n    simpleReducer,\n    webSocketReducer,\n    stocks: stocksReducer\n});","export default (state = {}, action) => {\n    switch (action.type) {\n        case 'SIMPLE_ACTION':\n            return {\n                result: action.payload\n            }\n        default:\n            return state\n    }\n}","import * as actions from '../actions/webSocketActions';\nimport {  stocksUpdateAction } from '../actions/stockUpdate';\nimport { parseStockData } from '../helpers/parseStocks'\n\nconst socketMiddleware = () => {\n    let socket = null;\n\n    const onOpen = store => (event) => {\n        console.log('websocket open', event.target.url);\n        store.dispatch(actions.wsConnected(event.target.url));\n    };\n\n    const onClose = store => () => {\n        store.dispatch(actions.wsDisconnected());\n    };\n\n    const onMessage = store => (event) => {\n        const payload = parseStockData(JSON.parse(event.data));\n        console.log('receiving server message : ', payload);\n\n        store.dispatch(stocksUpdateAction(payload))\n    };\n\n    // the middleware part of this function\n    return store => next => action => {\n        switch (action.type) {\n            case 'WS_CONNECT':\n                if (socket !== null) {\n                    socket.close();\n                }\n\n                // connect to the remote host\n                socket = new WebSocket(action.host);\n\n                // websocket handlers\n                socket.onmessage = onMessage(store);\n                socket.onclose = onClose(store);\n                socket.onopen = onOpen(store);\n\n                break;\n            case 'WS_DISCONNECT':\n                if (socket !== null) {\n                    socket.close();\n                }\n                socket = null;\n                console.log('websocket closed');\n                break;\n            default:\n                console.log('the next action:', action);\n                return next(action);\n        }\n    };\n};\n\nexport default socketMiddleware();\n","export const stocksUpdateAction = (stocks) => dispatch => {\n    dispatch({\n        type: 'STOCKS_UPDATE',\n        payload: stocks\n    })\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport WebSocketConnection from './hocs/WebSocketConnection';\nimport configureStore from './store';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Provider store={configureStore()}>\n        <WebSocketConnection\n            host={'ws://stocks.mnet.website'}\n        >\n            <App />,\n      </WebSocketConnection>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers/rootReducer';\nimport wsMiddleware from './middleware/middleware';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nexport default function configureStore(initialState = {}) {\n    return createStore(\n        rootReducer,\n        initialState,\n        composeWithDevTools(\n            applyMiddleware(thunk, wsMiddleware)\n        )\n    );\n}"],"sourceRoot":""}